# https://taskfile.dev

version: "3"

vars:
  TMP_DIR: ./tmp
  SSH_DIR: ./ssh
  IMG_URL: https://share.lv426.space/jammy-server-cloudimg-amd64.img
  IMG_NAME: base.img
  IMG_PATH: "{{.TMP_DIR}}/{{.IMG_NAME}}"
  CLOUDINIT_ISO_NAME: cidata.iso
  CLOUDINIT_ISO_PATH: "{{.TMP_DIR}}/{{.CLOUDINIT_ISO_NAME}}"
  CLOUDINIT_PATH: "./cloudinit"
  VM_NAME: vm
  VM_DISK_PATH: "{{.TMP_DIR}}/{{.VM_NAME}}.img"

tasks:
  tmp:
    cmds:
      - mkdir -p {{.TMP_DIR}}
      - mkdir -p {{.SSH_DIR}}
    status:
      - test -d "{{.TMP_DIR}}"
      - test -d "{{.SSH_DIR}}"

  ssh-gen:
    deps:
    - tmp
    cmds:
      - for: [meta, user, vendor]
        cmd: yes | ssh-keygen -t rsa -b 1024 -f {{ .SSH_DIR }}/{{ .ITEM }}-data -N "" -C "{{ .ITEM }}-data" -v
    status:
      - test -f "{{ .SSH_DIR }}/meta-data"
      - test -f "{{ .SSH_DIR }}/user-data"
      - test -f "{{ .SSH_DIR }}/vendor-data"

  ssh:
    vars:
      VM_IP_ADDR:
        sh: |
          virsh domifaddr {{.VM_NAME}} | grep ipv4 | awk '/ipv4/ {split($4, ip, "/"); print ip[1]}'
    cmds:
      - ssh cloud@{{.VM_IP_ADDR}} -i {{.SSH_DIR}}/user-data

  image-info:
    cmds:
      - qemu-img info {{.IMG_PATH}}

  image-get-base:
    deps:
      - tmp
    cmds:
      - curl https://share.lv426.space/jammy-server-cloudimg-amd64.img -o {{.IMG_PATH}}
      - task: image-info
    status:
      - test -f "{{.IMG_PATH}}"

  image-backup:
    cmds:
      - cp -vf {{.IMG_PATH}} {{.IMG_PATH}}.backup

  image-restore:
    cmds:
      - cp -vf {{.IMG_PATH}}.backup {{.IMG_PATH}}

  cloud-init:
    cmds:
      - rm -rf {{.CLOUDINIT_ISO_PATH}}
      - genisoimage -output {{.CLOUDINIT_ISO_PATH}} -fU -V cidata -r -J {{.CLOUDINIT_PATH}}/user-data {{.CLOUDINIT_PATH}}/meta-data {{.CLOUDINIT_PATH}}/vendor-data
    sources:
      - "{{ .CLOUDINIT_PATH }}/*"
    generates:
      - "{{ .CLOUDINIT_ISO_PATH }}"

  vm-disk:
    cmds:
      - cp -vf {{.IMG_PATH}} {{.VM_DISK_PATH}}
    status:
      - test -f "{{.VM_DISK_PATH}}"

  vm-disk-resize:
    cmds:
      - qemu-img resize {{.VM_DISK_PATH}} +1G
      - task: image-info

  vm-run:
    deps:
      - cloud-init
    cmds:
      - |
        virt-install \
        --name {{.VM_NAME}} \
        --os-variant ubuntu22.04 \
        --ram 1024 \
        --vcpus=1 \
        --disk path={{.VM_DISK_PATH}},format=qcow2,bus=virtio \
        --disk path={{.CLOUDINIT_ISO_PATH}},device=cdrom,bus=sata \
        --network network=default,model=virtio \
        --import \
        --graphics none \
        --console pty,target_type=virtio \
        --serial pty \
        --virt-type kvm

  vm:
    cmds:
      - task: ssh-gen
      - task: image-get-base
      - task: vm-disk
      - task: vm-run
      #- task: ansible-inventory

  vm-reboot:
    cmds:
      - virsh reboot --domain {{.VM_NAME}} || true

  vm-stop:
    cmds:
      - virsh stop --domain {{.VM_NAME}} || true

  vm-shutdown:
    cmds:
      - virsh shutdown --domain {{.VM_NAME}} || true

  vm-start:
    cmds:
      - virsh start --domain {{.VM_NAME}} || true

  vm-destroy:
    cmds:
      - virsh destroy --domain {{.VM_NAME}} || true

  vm-kill:
    cmds:
      - virsh destroy --domain {{.VM_NAME}} || true
      - virsh undefine --domain {{.VM_NAME}} || true
      - rm -rf {{.VM_DISK_PATH}}

  vm-ip:
    vars:
      VM_IP_ADDR:
        sh: |
          virsh domifaddr {{.VM_NAME}} | grep ipv4 | awk '/ipv4/ {split($4, ip, "/"); print ip[1]}'
    cmds:
      - echo "{{.VM_IP_ADDR}}"

  ansible-inventory:
    vars:
      VM_IP_ADDR:
        sh: |
          virsh domifaddr {{.VM_NAME}} | grep ipv4 | awk '/ipv4/ {split($4, ip, "/"); print ip[1]}'
    cmds:
      - |
        cat << EOF > inventory.yaml
        ---
        runners:
          hosts:
            {{.VM_NAME}}:
              ansible_port: 22
              ansible_host: {{.VM_IP_ADDR}}
              ansible_user: cloud
              ansible_ssh_private_key_file: ./ssh/user-data
        EOF
  ansible-playbook:
    deps:
      - ansible-inventory
    cmds:
      - ansible-playbook  --diff {{.CLI_ARGS}}
  con:
    cmds:
      - virsh console {{.VM_NAME}}

  vnc:
    cmds:
      - virsh vncdisplay {{.VM_NAME}}

  clean:
    cmds:
      - rm -rf {{.TMP_DIR}}
